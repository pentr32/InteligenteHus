
InteligenteHus.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  000006ec  00000780  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800232  00800232  000007b2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007b2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000824  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a98  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000010a4  00000000  00000000  000023dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c83  00000000  00000000  00003480  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00004104  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000787  00000000  00000000  00004328  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009ed  00000000  00000000  00004aaf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000549c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	50 c0       	rjmp	.+160    	; 0x122 <__bad_interrupt>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	ec ee       	ldi	r30, 0xEC	; 236
  fc:	f6 e0       	ldi	r31, 0x06	; 6
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a2 33       	cpi	r26, 0x32	; 50
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a2 e3       	ldi	r26, 0x32	; 50
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a4 33       	cpi	r26, 0x34	; 52
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	8d d2       	rcall	.+1306   	; 0x63a <main>
 120:	e3 c2       	rjmp	.+1478   	; 0x6e8 <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <MaxtrixKeypad_Init>:


// Funktion der initialiser Pull-up
void MaxtrixKeypad_Init()
{		
	lcd_init(LCD_DISP_ON_CURSOR);
 124:	8e e0       	ldi	r24, 0x0E	; 14
 126:	3a d2       	rcall	.+1140   	; 0x59c <lcd_init>
	lcd_clrscr();
 128:	15 d2       	rcall	.+1066   	; 0x554 <lcd_clrscr>
 12a:	e7 e0       	ldi	r30, 0x07	; 7
		
	DDRK |= (1<<C1) | (1<<C2) | (1<<C3) | (1<<C4);				// Output
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	80 81       	ld	r24, Z
 130:	8f 60       	ori	r24, 0x0F	; 15
 132:	80 83       	st	Z, r24
 134:	e8 e0       	ldi	r30, 0x08	; 8
	
	PORTK |= (1<<DDK4) | (1<<DDK5) | (1<<DDK6) | (1<<DDK7);		// Enable Pull-up
 136:	f1 e0       	ldi	r31, 0x01	; 1
 138:	80 81       	ld	r24, Z
 13a:	80 6f       	ori	r24, 0xF0	; 240
 13c:	80 83       	st	Z, r24
 13e:	08 95       	ret

00000140 <ColumnScan>:
 140:	e8 e0       	ldi	r30, 0x08	; 8

// Funktion der styre C1-C4 via portbit
int ColumnScan()
{	
	static int columnCount = 1;
	PORTK |= (1<<C1) | (1<<C2) | (1<<C3) | (1<<C4);				// Sætter bit til logik 1. dvs. man sætter 1 på alle koloner.
 142:	f1 e0       	ldi	r31, 0x01	; 1
 144:	80 81       	ld	r24, Z
 146:	8f 60       	ori	r24, 0x0F	; 15
 148:	80 83       	st	Z, r24
	
	switch(columnCount)
 14a:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 14e:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 152:	82 30       	cpi	r24, 0x02	; 2
 154:	91 05       	cpc	r25, r1
 156:	29 f1       	breq	.+74     	; 0x1a2 <ColumnScan+0x62>
 158:	1c f4       	brge	.+6      	; 0x160 <ColumnScan+0x20>
 15a:	01 97       	sbiw	r24, 0x01	; 1
 15c:	41 f0       	breq	.+16     	; 0x16e <ColumnScan+0x2e>
 15e:	6c c0       	rjmp	.+216    	; 0x238 <ColumnScan+0xf8>
 160:	83 30       	cpi	r24, 0x03	; 3
 162:	91 05       	cpc	r25, r1
 164:	c1 f1       	breq	.+112    	; 0x1d6 <ColumnScan+0x96>
 166:	04 97       	sbiw	r24, 0x04	; 4
 168:	09 f4       	brne	.+2      	; 0x16c <ColumnScan+0x2c>
 16a:	4f c0       	rjmp	.+158    	; 0x20a <ColumnScan+0xca>
 16c:	65 c0       	rjmp	.+202    	; 0x238 <ColumnScan+0xf8>
	{
		case 1:
			PORTK &= ~(1<<C1);									// Sætter bit logik 0. PK3
 16e:	e8 e0       	ldi	r30, 0x08	; 8
 170:	f1 e0       	ldi	r31, 0x01	; 1
 172:	80 81       	ld	r24, Z
 174:	87 7f       	andi	r24, 0xF7	; 247
 176:	80 83       	st	Z, r24
			columnCount++;
 178:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 17c:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 180:	01 96       	adiw	r24, 0x01	; 1
 182:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 186:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	83 ef       	ldi	r24, 0xF3	; 243
 18e:	91 e0       	ldi	r25, 0x01	; 1
 190:	21 50       	subi	r18, 0x01	; 1
 192:	80 40       	sbci	r24, 0x00	; 0
 194:	90 40       	sbci	r25, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <ColumnScan+0x50>
 198:	00 c0       	rjmp	.+0      	; 0x19a <ColumnScan+0x5a>
 19a:	00 00       	nop
			_delay_ms(40);
			return 0;
 19c:	80 e0       	ldi	r24, 0x00	; 0
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	08 95       	ret
		break;
		
		case 2:
			PORTK &= ~(1<<C2);									// Sætter bit logik 0. PK2
 1a2:	e8 e0       	ldi	r30, 0x08	; 8
 1a4:	f1 e0       	ldi	r31, 0x01	; 1
 1a6:	80 81       	ld	r24, Z
 1a8:	8b 7f       	andi	r24, 0xFB	; 251
 1aa:	80 83       	st	Z, r24
			columnCount++;
 1ac:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1b0:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b4:	01 96       	adiw	r24, 0x01	; 1
 1b6:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1ba:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1be:	2f ef       	ldi	r18, 0xFF	; 255
 1c0:	83 ef       	ldi	r24, 0xF3	; 243
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	80 40       	sbci	r24, 0x00	; 0
 1c8:	90 40       	sbci	r25, 0x00	; 0
 1ca:	e1 f7       	brne	.-8      	; 0x1c4 <ColumnScan+0x84>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <ColumnScan+0x8e>
 1ce:	00 00       	nop
			_delay_ms(40);
			return 1;
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	08 95       	ret
		break;
		
		case 3:
			PORTK &= ~(1<<C3);									// Sætter bit logik 0. PK1
 1d6:	e8 e0       	ldi	r30, 0x08	; 8
 1d8:	f1 e0       	ldi	r31, 0x01	; 1
 1da:	80 81       	ld	r24, Z
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	80 83       	st	Z, r24
			columnCount++;
 1e0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1e4:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1e8:	01 96       	adiw	r24, 0x01	; 1
 1ea:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1ee:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	83 ef       	ldi	r24, 0xF3	; 243
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	21 50       	subi	r18, 0x01	; 1
 1fa:	80 40       	sbci	r24, 0x00	; 0
 1fc:	90 40       	sbci	r25, 0x00	; 0
 1fe:	e1 f7       	brne	.-8      	; 0x1f8 <ColumnScan+0xb8>
 200:	00 c0       	rjmp	.+0      	; 0x202 <ColumnScan+0xc2>
 202:	00 00       	nop
			_delay_ms(40);
			return 2;
 204:	82 e0       	ldi	r24, 0x02	; 2
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	08 95       	ret
		break;
		
		case 4:
			PORTK &= ~(1<<C4);									// Sætter bit logik 0. PK0
 20a:	e8 e0       	ldi	r30, 0x08	; 8
 20c:	f1 e0       	ldi	r31, 0x01	; 1
 20e:	80 81       	ld	r24, Z
 210:	8e 7f       	andi	r24, 0xFE	; 254
 212:	80 83       	st	Z, r24
			columnCount = 1;
 214:	81 e0       	ldi	r24, 0x01	; 1
 216:	90 e0       	ldi	r25, 0x00	; 0
 218:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 21c:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 220:	2f ef       	ldi	r18, 0xFF	; 255
 222:	83 ef       	ldi	r24, 0xF3	; 243
 224:	91 e0       	ldi	r25, 0x01	; 1
 226:	21 50       	subi	r18, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <ColumnScan+0xe6>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <ColumnScan+0xf0>
 230:	00 00       	nop
			_delay_ms(40);
			return 3;
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	08 95       	ret
		break;
	}
}
 238:	08 95       	ret

0000023a <ReadRows>:

// Funktion der læse R1-R4 og returner den specifik row.
int ReadRows()
{		
	if(~PINK & (1<<R1))
 23a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 23e:	84 fd       	sbrc	r24, 4
 240:	13 c0       	rjmp	.+38     	; 0x268 <ReadRows+0x2e>
 242:	2f ef       	ldi	r18, 0xFF	; 255
 244:	83 ef       	ldi	r24, 0xF3	; 243
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	21 50       	subi	r18, 0x01	; 1
 24a:	80 40       	sbci	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	e1 f7       	brne	.-8      	; 0x248 <ReadRows+0xe>
 250:	00 c0       	rjmp	.+0      	; 0x252 <ReadRows+0x18>
 252:	00 00       	nop
	{
		_delay_ms(40); 
		if(~PINK & (1<<R1))
 254:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 258:	84 fb       	bst	r24, 4
 25a:	22 27       	eor	r18, r18
 25c:	20 f9       	bld	r18, 0
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	31 95       	neg	r19
 262:	21 95       	neg	r18
 264:	31 09       	sbc	r19, r1
 266:	45 c0       	rjmp	.+138    	; 0x2f2 <ReadRows+0xb8>
		{
			return -1;
		}
	}
	
	if(~PINK & (1<<R2))
 268:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 26c:	85 fd       	sbrc	r24, 5
 26e:	10 c0       	rjmp	.+32     	; 0x290 <ReadRows+0x56>
 270:	2f ef       	ldi	r18, 0xFF	; 255
 272:	83 ef       	ldi	r24, 0xF3	; 243
 274:	91 e0       	ldi	r25, 0x01	; 1
 276:	21 50       	subi	r18, 0x01	; 1
 278:	80 40       	sbci	r24, 0x00	; 0
 27a:	90 40       	sbci	r25, 0x00	; 0
 27c:	e1 f7       	brne	.-8      	; 0x276 <ReadRows+0x3c>
 27e:	00 c0       	rjmp	.+0      	; 0x280 <ReadRows+0x46>
 280:	00 00       	nop
	{
		_delay_ms(40); 
		if(~PINK & (1<<R2))
 282:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 286:	85 ff       	sbrs	r24, 5
 288:	2c c0       	rjmp	.+88     	; 0x2e2 <ReadRows+0xa8>
		{
			return 1;					// PK5
		}
		else
		{
			return -1;
 28a:	2f ef       	ldi	r18, 0xFF	; 255
 28c:	3f ef       	ldi	r19, 0xFF	; 255
 28e:	31 c0       	rjmp	.+98     	; 0x2f2 <ReadRows+0xb8>
		}
	}
	
	if(~PINK & (1<<R3))
 290:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 294:	86 fd       	sbrc	r24, 6
 296:	10 c0       	rjmp	.+32     	; 0x2b8 <ReadRows+0x7e>
 298:	2f ef       	ldi	r18, 0xFF	; 255
 29a:	83 ef       	ldi	r24, 0xF3	; 243
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	21 50       	subi	r18, 0x01	; 1
 2a0:	80 40       	sbci	r24, 0x00	; 0
 2a2:	90 40       	sbci	r25, 0x00	; 0
 2a4:	e1 f7       	brne	.-8      	; 0x29e <ReadRows+0x64>
 2a6:	00 c0       	rjmp	.+0      	; 0x2a8 <ReadRows+0x6e>
 2a8:	00 00       	nop
	{
		_delay_ms(40); 
		if(~PINK & (1<<R3))
 2aa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2ae:	86 ff       	sbrs	r24, 6
 2b0:	1b c0       	rjmp	.+54     	; 0x2e8 <ReadRows+0xae>
		{
			return 2;					// PK6
		}
		else
		{
			return -1;
 2b2:	2f ef       	ldi	r18, 0xFF	; 255
 2b4:	3f ef       	ldi	r19, 0xFF	; 255
 2b6:	1d c0       	rjmp	.+58     	; 0x2f2 <ReadRows+0xb8>
		}
	}
	
	if(~PINK & (1<<R4)) 
 2b8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2bc:	88 23       	and	r24, r24
 2be:	84 f0       	brlt	.+32     	; 0x2e0 <ReadRows+0xa6>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	83 ef       	ldi	r24, 0xF3	; 243
 2c4:	91 e0       	ldi	r25, 0x01	; 1
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <ReadRows+0x8c>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <ReadRows+0x96>
 2d0:	00 00       	nop
	{
		_delay_ms(40); 
		if(~PINK & (1<<R4))
 2d2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
 2d6:	88 23       	and	r24, r24
 2d8:	54 f4       	brge	.+20     	; 0x2ee <ReadRows+0xb4>
		{
			return 3;					// PK7
		}
		else
		{
			return -1;
 2da:	2f ef       	ldi	r18, 0xFF	; 255
 2dc:	3f ef       	ldi	r19, 0xFF	; 255
 2de:	09 c0       	rjmp	.+18     	; 0x2f2 <ReadRows+0xb8>
		}
	}
}
 2e0:	08 95       	ret
	if(~PINK & (1<<R2))
	{
		_delay_ms(40); 
		if(~PINK & (1<<R2))
		{
			return 1;					// PK5
 2e2:	21 e0       	ldi	r18, 0x01	; 1
 2e4:	30 e0       	ldi	r19, 0x00	; 0
 2e6:	05 c0       	rjmp	.+10     	; 0x2f2 <ReadRows+0xb8>
	if(~PINK & (1<<R3))
	{
		_delay_ms(40); 
		if(~PINK & (1<<R3))
		{
			return 2;					// PK6
 2e8:	22 e0       	ldi	r18, 0x02	; 2
 2ea:	30 e0       	ldi	r19, 0x00	; 0
 2ec:	02 c0       	rjmp	.+4      	; 0x2f2 <ReadRows+0xb8>
	if(~PINK & (1<<R4)) 
	{
		_delay_ms(40); 
		if(~PINK & (1<<R4))
		{
			return 3;					// PK7
 2ee:	23 e0       	ldi	r18, 0x03	; 3
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 2f       	mov	r24, r18
 2f4:	93 2f       	mov	r25, r19
		else
		{
			return -1;
		}
	}
}
 2f6:	08 95       	ret

000002f8 <DecodeKeyboard>:

// Funktion der decoder mine knapper på bestemt koloner og rækker.
char DecodeKeyboard()
{	
 2f8:	cf 93       	push	r28
 2fa:	df 93       	push	r29
	int column = ColumnScan();
 2fc:	21 df       	rcall	.-446    	; 0x140 <ColumnScan>
 2fe:	ec 01       	movw	r28, r24
	int row = ReadRows();
 300:	9c df       	rcall	.-200    	; 0x23a <ReadRows>
 302:	8f 3f       	cpi	r24, 0xFF	; 255
	
	if(row != -1)
 304:	2f ef       	ldi	r18, 0xFF	; 255
 306:	92 07       	cpc	r25, r18
 308:	51 f0       	breq	.+20     	; 0x31e <DecodeKeyboard+0x26>
 30a:	cc 0f       	add	r28, r28
	{	
		//sprintf(buffer, "%c", button[column][row]); 
		//lcd_puts(buffer);
		
		return button[column][row];
 30c:	dd 1f       	adc	r29, r29
 30e:	cc 0f       	add	r28, r28
 310:	dd 1f       	adc	r29, r29
 312:	ce 5f       	subi	r28, 0xFE	; 254
 314:	dd 4f       	sbci	r29, 0xFD	; 253
 316:	c8 0f       	add	r28, r24
 318:	d9 1f       	adc	r29, r25
 31a:	88 81       	ld	r24, Y
 31c:	00 c0       	rjmp	.+0      	; 0x31e <DecodeKeyboard+0x26>
 31e:	df 91       	pop	r29
	}
}
 320:	cf 91       	pop	r28
 322:	08 95       	ret

00000324 <Menu>:
 324:	e9 df       	rcall	.-46     	; 0x2f8 <DecodeKeyboard>
{
	char buffer[16];
	
	char input_Button = DecodeKeyboard();
	
	switch(input_Button)
 326:	81 34       	cpi	r24, 0x41	; 65
 328:	19 f0       	breq	.+6      	; 0x330 <Menu+0xc>
 32a:	82 34       	cpi	r24, 0x42	; 66
 32c:	c1 f0       	breq	.+48     	; 0x35e <Menu+0x3a>
 32e:	08 95       	ret
	{
		case motor_button:
			
			//sprintf(buffer, "%c", 'T'); lcd_puts(buffer);
			
			motor_Enabled = !motor_Enabled;
 330:	90 91 33 02 	lds	r25, 0x0233	; 0x800233 <motor_Enabled>
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	89 27       	eor	r24, r25
 338:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <motor_Enabled>
			
			if(motor_Enabled)
 33c:	88 23       	and	r24, r24
			{
				 OpenWindows(); 
 33e:	49 f0       	breq	.+18     	; 0x352 <Menu+0x2e>
				 
				 lcd_clrscr(); 
 340:	9b d1       	rcall	.+822    	; 0x678 <OpenWindows>
				 lcd_puts("Window is open");
 342:	08 d1       	rcall	.+528    	; 0x554 <lcd_clrscr>
 344:	82 e1       	ldi	r24, 0x12	; 18
 346:	92 e0       	ldi	r25, 0x02	; 2
 348:	1a d1       	rcall	.+564    	; 0x57e <lcd_puts>
			}
			
			if(!motor_Enabled)
 34a:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <motor_Enabled>
			{
				 CloseWindows(); 
 34e:	81 11       	cpse	r24, r1
				 
				 lcd_clrscr(); 
 350:	0c c0       	rjmp	.+24     	; 0x36a <Menu+0x46>
 352:	ae d1       	rcall	.+860    	; 0x6b0 <CloseWindows>
				 lcd_puts("Window is closed");
 354:	ff d0       	rcall	.+510    	; 0x554 <lcd_clrscr>
 356:	81 e2       	ldi	r24, 0x21	; 33
 358:	92 e0       	ldi	r25, 0x02	; 2
 35a:	11 c1       	rjmp	.+546    	; 0x57e <lcd_puts>
 35c:	08 95       	ret
			}
			
		break;
		
		case ventilator_button:
			ventilator_Enabled = !ventilator_Enabled;
 35e:	90 91 32 02 	lds	r25, 0x0232	; 0x800232 <__data_end>
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	89 27       	eor	r24, r25
 366:	80 93 32 02 	sts	0x0232, r24	; 0x800232 <__data_end>
 36a:	08 95       	ret

0000036c <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
 36c:	eb e0       	ldi	r30, 0x0B	; 11
 36e:	f1 e0       	ldi	r31, 0x01	; 1
 370:	80 81       	ld	r24, Z
 372:	84 60       	ori	r24, 0x04	; 4
 374:	80 83       	st	Z, r24
 376:	00 00       	nop
 378:	80 81       	ld	r24, Z
 37a:	8b 7f       	andi	r24, 0xFB	; 251
 37c:	80 83       	st	Z, r24
 37e:	08 95       	ret

00000380 <lcd_write>:
 380:	cf 93       	push	r28
 382:	c8 2f       	mov	r28, r24
 384:	66 23       	and	r22, r22
 386:	31 f0       	breq	.+12     	; 0x394 <lcd_write+0x14>
 388:	eb e0       	ldi	r30, 0x0B	; 11
 38a:	f1 e0       	ldi	r31, 0x01	; 1
 38c:	80 81       	ld	r24, Z
 38e:	81 60       	ori	r24, 0x01	; 1
 390:	80 83       	st	Z, r24
 392:	05 c0       	rjmp	.+10     	; 0x39e <lcd_write+0x1e>
 394:	eb e0       	ldi	r30, 0x0B	; 11
 396:	f1 e0       	ldi	r31, 0x01	; 1
 398:	80 81       	ld	r24, Z
 39a:	8e 7f       	andi	r24, 0xFE	; 254
 39c:	80 83       	st	Z, r24
 39e:	eb e0       	ldi	r30, 0x0B	; 11
 3a0:	f1 e0       	ldi	r31, 0x01	; 1
 3a2:	80 81       	ld	r24, Z
 3a4:	8d 7f       	andi	r24, 0xFD	; 253
 3a6:	80 83       	st	Z, r24
 3a8:	aa e0       	ldi	r26, 0x0A	; 10
 3aa:	b1 e0       	ldi	r27, 0x01	; 1
 3ac:	8c 91       	ld	r24, X
 3ae:	88 60       	ori	r24, 0x08	; 8
 3b0:	8c 93       	st	X, r24
 3b2:	8c 91       	ld	r24, X
 3b4:	80 61       	ori	r24, 0x10	; 16
 3b6:	8c 93       	st	X, r24
 3b8:	8c 91       	ld	r24, X
 3ba:	80 62       	ori	r24, 0x20	; 32
 3bc:	8c 93       	st	X, r24
 3be:	8c 91       	ld	r24, X
 3c0:	80 64       	ori	r24, 0x40	; 64
 3c2:	8c 93       	st	X, r24
 3c4:	80 81       	ld	r24, Z
 3c6:	8f 7b       	andi	r24, 0xBF	; 191
 3c8:	80 83       	st	Z, r24
 3ca:	80 81       	ld	r24, Z
 3cc:	8f 7d       	andi	r24, 0xDF	; 223
 3ce:	80 83       	st	Z, r24
 3d0:	80 81       	ld	r24, Z
 3d2:	8f 7e       	andi	r24, 0xEF	; 239
 3d4:	80 83       	st	Z, r24
 3d6:	80 81       	ld	r24, Z
 3d8:	87 7f       	andi	r24, 0xF7	; 247
 3da:	80 83       	st	Z, r24
 3dc:	cc 23       	and	r28, r28
 3de:	1c f4       	brge	.+6      	; 0x3e6 <lcd_write+0x66>
 3e0:	80 81       	ld	r24, Z
 3e2:	80 64       	ori	r24, 0x40	; 64
 3e4:	80 83       	st	Z, r24
 3e6:	c6 ff       	sbrs	r28, 6
 3e8:	05 c0       	rjmp	.+10     	; 0x3f4 <lcd_write+0x74>
 3ea:	eb e0       	ldi	r30, 0x0B	; 11
 3ec:	f1 e0       	ldi	r31, 0x01	; 1
 3ee:	80 81       	ld	r24, Z
 3f0:	80 62       	ori	r24, 0x20	; 32
 3f2:	80 83       	st	Z, r24
 3f4:	c5 ff       	sbrs	r28, 5
 3f6:	05 c0       	rjmp	.+10     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3f8:	eb e0       	ldi	r30, 0x0B	; 11
 3fa:	f1 e0       	ldi	r31, 0x01	; 1
 3fc:	80 81       	ld	r24, Z
 3fe:	80 61       	ori	r24, 0x10	; 16
 400:	80 83       	st	Z, r24
 402:	c4 ff       	sbrs	r28, 4
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	eb e0       	ldi	r30, 0x0B	; 11
 408:	f1 e0       	ldi	r31, 0x01	; 1
 40a:	80 81       	ld	r24, Z
 40c:	88 60       	ori	r24, 0x08	; 8
 40e:	80 83       	st	Z, r24
 410:	ad df       	rcall	.-166    	; 0x36c <toggle_e>
 412:	eb e0       	ldi	r30, 0x0B	; 11
 414:	f1 e0       	ldi	r31, 0x01	; 1
 416:	80 81       	ld	r24, Z
 418:	8f 7b       	andi	r24, 0xBF	; 191
 41a:	80 83       	st	Z, r24
 41c:	80 81       	ld	r24, Z
 41e:	8f 7d       	andi	r24, 0xDF	; 223
 420:	80 83       	st	Z, r24
 422:	80 81       	ld	r24, Z
 424:	8f 7e       	andi	r24, 0xEF	; 239
 426:	80 83       	st	Z, r24
 428:	80 81       	ld	r24, Z
 42a:	87 7f       	andi	r24, 0xF7	; 247
 42c:	80 83       	st	Z, r24
 42e:	c3 ff       	sbrs	r28, 3
 430:	03 c0       	rjmp	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 432:	80 81       	ld	r24, Z
 434:	80 64       	ori	r24, 0x40	; 64
 436:	80 83       	st	Z, r24
 438:	c2 ff       	sbrs	r28, 2
 43a:	05 c0       	rjmp	.+10     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 43c:	eb e0       	ldi	r30, 0x0B	; 11
 43e:	f1 e0       	ldi	r31, 0x01	; 1
 440:	80 81       	ld	r24, Z
 442:	80 62       	ori	r24, 0x20	; 32
 444:	80 83       	st	Z, r24
 446:	c1 ff       	sbrs	r28, 1
 448:	05 c0       	rjmp	.+10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
 44a:	eb e0       	ldi	r30, 0x0B	; 11
 44c:	f1 e0       	ldi	r31, 0x01	; 1
 44e:	80 81       	ld	r24, Z
 450:	80 61       	ori	r24, 0x10	; 16
 452:	80 83       	st	Z, r24
 454:	c0 ff       	sbrs	r28, 0
 456:	05 c0       	rjmp	.+10     	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
 458:	eb e0       	ldi	r30, 0x0B	; 11
 45a:	f1 e0       	ldi	r31, 0x01	; 1
 45c:	80 81       	ld	r24, Z
 45e:	88 60       	ori	r24, 0x08	; 8
 460:	80 83       	st	Z, r24
 462:	84 df       	rcall	.-248    	; 0x36c <toggle_e>
 464:	eb e0       	ldi	r30, 0x0B	; 11
 466:	f1 e0       	ldi	r31, 0x01	; 1
 468:	80 81       	ld	r24, Z
 46a:	88 60       	ori	r24, 0x08	; 8
 46c:	80 83       	st	Z, r24
 46e:	80 81       	ld	r24, Z
 470:	80 61       	ori	r24, 0x10	; 16
 472:	80 83       	st	Z, r24
 474:	80 81       	ld	r24, Z
 476:	80 62       	ori	r24, 0x20	; 32
 478:	80 83       	st	Z, r24
 47a:	80 81       	ld	r24, Z
 47c:	80 64       	ori	r24, 0x40	; 64
 47e:	80 83       	st	Z, r24
 480:	cf 91       	pop	r28
 482:	08 95       	ret

00000484 <lcd_read>:
 484:	88 23       	and	r24, r24
 486:	31 f0       	breq	.+12     	; 0x494 <lcd_read+0x10>
 488:	eb e0       	ldi	r30, 0x0B	; 11
 48a:	f1 e0       	ldi	r31, 0x01	; 1
 48c:	80 81       	ld	r24, Z
 48e:	81 60       	ori	r24, 0x01	; 1
 490:	80 83       	st	Z, r24
 492:	05 c0       	rjmp	.+10     	; 0x49e <lcd_read+0x1a>
 494:	eb e0       	ldi	r30, 0x0B	; 11
 496:	f1 e0       	ldi	r31, 0x01	; 1
 498:	80 81       	ld	r24, Z
 49a:	8e 7f       	andi	r24, 0xFE	; 254
 49c:	80 83       	st	Z, r24
 49e:	ab e0       	ldi	r26, 0x0B	; 11
 4a0:	b1 e0       	ldi	r27, 0x01	; 1
 4a2:	8c 91       	ld	r24, X
 4a4:	82 60       	ori	r24, 0x02	; 2
 4a6:	8c 93       	st	X, r24
 4a8:	ea e0       	ldi	r30, 0x0A	; 10
 4aa:	f1 e0       	ldi	r31, 0x01	; 1
 4ac:	80 81       	ld	r24, Z
 4ae:	87 7f       	andi	r24, 0xF7	; 247
 4b0:	80 83       	st	Z, r24
 4b2:	80 81       	ld	r24, Z
 4b4:	8f 7e       	andi	r24, 0xEF	; 239
 4b6:	80 83       	st	Z, r24
 4b8:	80 81       	ld	r24, Z
 4ba:	8f 7d       	andi	r24, 0xDF	; 223
 4bc:	80 83       	st	Z, r24
 4be:	80 81       	ld	r24, Z
 4c0:	8f 7b       	andi	r24, 0xBF	; 191
 4c2:	80 83       	st	Z, r24
 4c4:	8c 91       	ld	r24, X
 4c6:	84 60       	ori	r24, 0x04	; 4
 4c8:	8c 93       	st	X, r24
 4ca:	00 00       	nop
 4cc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 4d0:	83 ff       	sbrs	r24, 3
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <lcd_read+0x54>
 4d4:	80 e1       	ldi	r24, 0x10	; 16
 4d6:	01 c0       	rjmp	.+2      	; 0x4da <lcd_read+0x56>
 4d8:	80 e0       	ldi	r24, 0x00	; 0
 4da:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 4de:	94 fd       	sbrc	r25, 4
 4e0:	80 62       	ori	r24, 0x20	; 32
 4e2:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 4e6:	95 fd       	sbrc	r25, 5
 4e8:	80 64       	ori	r24, 0x40	; 64
 4ea:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 4ee:	96 fd       	sbrc	r25, 6
 4f0:	80 68       	ori	r24, 0x80	; 128
 4f2:	eb e0       	ldi	r30, 0x0B	; 11
 4f4:	f1 e0       	ldi	r31, 0x01	; 1
 4f6:	90 81       	ld	r25, Z
 4f8:	9b 7f       	andi	r25, 0xFB	; 251
 4fa:	90 83       	st	Z, r25
 4fc:	00 00       	nop
 4fe:	90 81       	ld	r25, Z
 500:	94 60       	ori	r25, 0x04	; 4
 502:	90 83       	st	Z, r25
 504:	00 00       	nop
 506:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 50a:	93 fd       	sbrc	r25, 3
 50c:	81 60       	ori	r24, 0x01	; 1
 50e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 512:	94 fd       	sbrc	r25, 4
 514:	82 60       	ori	r24, 0x02	; 2
 516:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 51a:	95 fd       	sbrc	r25, 5
 51c:	84 60       	ori	r24, 0x04	; 4
 51e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <__TEXT_REGION_LENGTH__+0x700109>
 522:	96 fd       	sbrc	r25, 6
 524:	88 60       	ori	r24, 0x08	; 8
 526:	eb e0       	ldi	r30, 0x0B	; 11
 528:	f1 e0       	ldi	r31, 0x01	; 1
 52a:	90 81       	ld	r25, Z
 52c:	9b 7f       	andi	r25, 0xFB	; 251
 52e:	90 83       	st	Z, r25
 530:	08 95       	ret

00000532 <lcd_waitbusy>:
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	a7 df       	rcall	.-178    	; 0x484 <lcd_read>
 536:	88 23       	and	r24, r24
 538:	e4 f3       	brlt	.-8      	; 0x532 <lcd_waitbusy>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <lcd_waitbusy+0xa>
 53c:	00 c0       	rjmp	.+0      	; 0x53e <lcd_waitbusy+0xc>
 53e:	80 e0       	ldi	r24, 0x00	; 0
 540:	a1 cf       	rjmp	.-190    	; 0x484 <lcd_read>
 542:	08 95       	ret

00000544 <lcd_command>:
 544:	cf 93       	push	r28
 546:	c8 2f       	mov	r28, r24
 548:	f4 df       	rcall	.-24     	; 0x532 <lcd_waitbusy>
 54a:	60 e0       	ldi	r22, 0x00	; 0
 54c:	8c 2f       	mov	r24, r28
 54e:	18 df       	rcall	.-464    	; 0x380 <lcd_write>
 550:	cf 91       	pop	r28
 552:	08 95       	ret

00000554 <lcd_clrscr>:
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	f6 cf       	rjmp	.-20     	; 0x544 <lcd_command>
 558:	08 95       	ret

0000055a <lcd_putc>:
 55a:	cf 93       	push	r28
 55c:	c8 2f       	mov	r28, r24
 55e:	e9 df       	rcall	.-46     	; 0x532 <lcd_waitbusy>
 560:	ca 30       	cpi	r28, 0x0A	; 10
 562:	41 f4       	brne	.+16     	; 0x574 <lcd_putc+0x1a>
 564:	80 34       	cpi	r24, 0x40	; 64
 566:	10 f0       	brcs	.+4      	; 0x56c <lcd_putc+0x12>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	01 c0       	rjmp	.+2      	; 0x56e <lcd_putc+0x14>
 56c:	80 e4       	ldi	r24, 0x40	; 64
 56e:	80 58       	subi	r24, 0x80	; 128
 570:	e9 df       	rcall	.-46     	; 0x544 <lcd_command>
 572:	03 c0       	rjmp	.+6      	; 0x57a <lcd_putc+0x20>
 574:	61 e0       	ldi	r22, 0x01	; 1
 576:	8c 2f       	mov	r24, r28
 578:	03 df       	rcall	.-506    	; 0x380 <lcd_write>
 57a:	cf 91       	pop	r28
 57c:	08 95       	ret

0000057e <lcd_puts>:
 57e:	cf 93       	push	r28
 580:	df 93       	push	r29
 582:	ec 01       	movw	r28, r24
 584:	21 96       	adiw	r28, 0x01	; 1
 586:	fc 01       	movw	r30, r24
 588:	80 81       	ld	r24, Z
 58a:	88 23       	and	r24, r24
 58c:	21 f0       	breq	.+8      	; 0x596 <lcd_puts+0x18>
 58e:	e5 df       	rcall	.-54     	; 0x55a <lcd_putc>
 590:	89 91       	ld	r24, Y+
 592:	81 11       	cpse	r24, r1
 594:	fc cf       	rjmp	.-8      	; 0x58e <lcd_puts+0x10>
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 59c:	1f 93       	push	r17
 59e:	cf 93       	push	r28
 5a0:	df 93       	push	r29
 5a2:	18 2f       	mov	r17, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 5a4:	ea e0       	ldi	r30, 0x0A	; 10
 5a6:	f1 e0       	ldi	r31, 0x01	; 1
 5a8:	80 81       	ld	r24, Z
 5aa:	81 60       	ori	r24, 0x01	; 1
 5ac:	80 83       	st	Z, r24
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 5ae:	80 81       	ld	r24, Z
 5b0:	82 60       	ori	r24, 0x02	; 2
 5b2:	80 83       	st	Z, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 5b4:	80 81       	ld	r24, Z
 5b6:	84 60       	ori	r24, 0x04	; 4
 5b8:	80 83       	st	Z, r24
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 5ba:	80 81       	ld	r24, Z
 5bc:	88 60       	ori	r24, 0x08	; 8
 5be:	80 83       	st	Z, r24
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 5c0:	80 81       	ld	r24, Z
 5c2:	80 61       	ori	r24, 0x10	; 16
 5c4:	80 83       	st	Z, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 5c6:	80 81       	ld	r24, Z
 5c8:	80 62       	ori	r24, 0x20	; 32
 5ca:	80 83       	st	Z, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 5cc:	80 81       	ld	r24, Z
 5ce:	80 64       	ori	r24, 0x40	; 64
 5d0:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d2:	8f e9       	ldi	r24, 0x9F	; 159
 5d4:	9f e0       	ldi	r25, 0x0F	; 15
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <lcd_init+0x3a>
 5da:	00 c0       	rjmp	.+0      	; 0x5dc <lcd_init+0x40>
 5dc:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
 5de:	cb e0       	ldi	r28, 0x0B	; 11
 5e0:	d1 e0       	ldi	r29, 0x01	; 1
 5e2:	88 81       	ld	r24, Y
 5e4:	80 61       	ori	r24, 0x10	; 16
 5e6:	88 83       	st	Y, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
 5e8:	88 81       	ld	r24, Y
 5ea:	88 60       	ori	r24, 0x08	; 8
 5ec:	88 83       	st	Y, r24
    lcd_e_toggle();
 5ee:	be de       	rcall	.-644    	; 0x36c <toggle_e>
 5f0:	81 ee       	ldi	r24, 0xE1	; 225
 5f2:	94 e0       	ldi	r25, 0x04	; 4
 5f4:	01 97       	sbiw	r24, 0x01	; 1
 5f6:	f1 f7       	brne	.-4      	; 0x5f4 <lcd_init+0x58>
 5f8:	00 c0       	rjmp	.+0      	; 0x5fa <lcd_init+0x5e>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 5fa:	00 00       	nop
 5fc:	b7 de       	rcall	.-658    	; 0x36c <toggle_e>
 5fe:	95 e1       	ldi	r25, 0x15	; 21
 600:	9a 95       	dec	r25
 602:	f1 f7       	brne	.-4      	; 0x600 <lcd_init+0x64>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 604:	00 00       	nop
 606:	b2 de       	rcall	.-668    	; 0x36c <toggle_e>
 608:	85 e1       	ldi	r24, 0x15	; 21
 60a:	8a 95       	dec	r24
 60c:	f1 f7       	brne	.-4      	; 0x60a <lcd_init+0x6e>
 60e:	00 00       	nop
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 610:	88 81       	ld	r24, Y
 612:	87 7f       	andi	r24, 0xF7	; 247
    lcd_e_toggle();
 614:	88 83       	st	Y, r24
 616:	aa de       	rcall	.-684    	; 0x36c <toggle_e>
 618:	95 e1       	ldi	r25, 0x15	; 21
 61a:	9a 95       	dec	r25
 61c:	f1 f7       	brne	.-4      	; 0x61a <lcd_init+0x7e>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 61e:	00 00       	nop
 620:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 622:	90 df       	rcall	.-224    	; 0x544 <lcd_command>
 624:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
 626:	8e df       	rcall	.-228    	; 0x544 <lcd_command>
 628:	95 df       	rcall	.-214    	; 0x554 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 62a:	86 e0       	ldi	r24, 0x06	; 6
 62c:	8b df       	rcall	.-234    	; 0x544 <lcd_command>
 62e:	81 2f       	mov	r24, r17
    lcd_command(dispAttr);                  /* display/cursor control       */
 630:	89 df       	rcall	.-238    	; 0x544 <lcd_command>
 632:	df 91       	pop	r29
 634:	cf 91       	pop	r28

}/* lcd_init */
 636:	1f 91       	pop	r17
 638:	08 95       	ret

0000063a <main>:
#include <avr/interrupt.h>
#include "Menu/Keypad.h"
	
int main(void)
{	
	MaxtrixKeypad_Init();
 63a:	74 dd       	rcall	.-1304   	; 0x124 <MaxtrixKeypad_Init>
	ServoMotor_Init();
 63c:	02 d0       	rcall	.+4      	; 0x642 <ServoMotor_Init>
	
	
	while(1)
	{
		Menu();
 63e:	72 de       	rcall	.-796    	; 0x324 <Menu>
 640:	fe cf       	rjmp	.-4      	; 0x63e <main+0x4>

00000642 <ServoMotor_Init>:
 642:	25 9a       	sbi	0x04, 5	; 4

void ServoMotor_Init()
{
	DDRB |= (1<<DDB5);
	
	TCCR1B |= (1<<WGM13);
 644:	e1 e8       	ldi	r30, 0x81	; 129
 646:	f0 e0       	ldi	r31, 0x00	; 0
 648:	80 81       	ld	r24, Z
 64a:	80 61       	ori	r24, 0x10	; 16
 64c:	80 83       	st	Z, r24
	
	TCCR1A |= (1<<COM1A1) | (1<<WGM11);
 64e:	a0 e8       	ldi	r26, 0x80	; 128
 650:	b0 e0       	ldi	r27, 0x00	; 0
 652:	8c 91       	ld	r24, X
 654:	82 68       	ori	r24, 0x82	; 130
 656:	8c 93       	st	X, r24
	
	ICR1 = 20000;
 658:	80 e2       	ldi	r24, 0x20	; 32
 65a:	9e e4       	ldi	r25, 0x4E	; 78
 65c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x700087>
 660:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x700086>
	
	OCR1A = 1000;
 664:	88 ee       	ldi	r24, 0xE8	; 232
 666:	93 e0       	ldi	r25, 0x03	; 3
 668:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x700089>
 66c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x700088>
	
	TCCR1B |= ((1<<CS11));
 670:	80 81       	ld	r24, Z
 672:	82 60       	ori	r24, 0x02	; 2
 674:	80 83       	st	Z, r24
 676:	08 95       	ret

00000678 <OpenWindows>:
}

void OpenWindows()
{
	//OCR2A = 1000;
	for(OCR1A=2000;OCR1A >= 1000;OCR1A--)
 678:	e8 e8       	ldi	r30, 0x88	; 136
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 ed       	ldi	r24, 0xD0	; 208
 67e:	97 e0       	ldi	r25, 0x07	; 7
 680:	91 83       	std	Z+1, r25	; 0x01
 682:	80 83       	st	Z, r24
 684:	80 81       	ld	r24, Z
 686:	91 81       	ldd	r25, Z+1	; 0x01
 688:	88 3e       	cpi	r24, 0xE8	; 232
 68a:	93 40       	sbci	r25, 0x03	; 3
 68c:	80 f0       	brcs	.+32     	; 0x6ae <OpenWindows+0x36>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 68e:	8f e3       	ldi	r24, 0x3F	; 63
 690:	9f e1       	ldi	r25, 0x1F	; 31
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <OpenWindows+0x1a>
 696:	00 c0       	rjmp	.+0      	; 0x698 <OpenWindows+0x20>
 698:	00 00       	nop
 69a:	80 81       	ld	r24, Z
 69c:	91 81       	ldd	r25, Z+1	; 0x01
 69e:	01 97       	sbiw	r24, 0x01	; 1
 6a0:	91 83       	std	Z+1, r25	; 0x01
 6a2:	80 83       	st	Z, r24
 6a4:	80 81       	ld	r24, Z
 6a6:	91 81       	ldd	r25, Z+1	; 0x01
 6a8:	88 3e       	cpi	r24, 0xE8	; 232
 6aa:	93 40       	sbci	r25, 0x03	; 3
 6ac:	80 f7       	brcc	.-32     	; 0x68e <OpenWindows+0x16>
 6ae:	08 95       	ret

000006b0 <CloseWindows>:
}

void CloseWindows()
{
	//OCR2A = 2000;
	for(OCR1A=1000;OCR1A <= 2000;OCR1A++)
 6b0:	e8 e8       	ldi	r30, 0x88	; 136
 6b2:	f0 e0       	ldi	r31, 0x00	; 0
 6b4:	88 ee       	ldi	r24, 0xE8	; 232
 6b6:	93 e0       	ldi	r25, 0x03	; 3
 6b8:	91 83       	std	Z+1, r25	; 0x01
 6ba:	80 83       	st	Z, r24
 6bc:	80 81       	ld	r24, Z
 6be:	91 81       	ldd	r25, Z+1	; 0x01
 6c0:	81 3d       	cpi	r24, 0xD1	; 209
 6c2:	97 40       	sbci	r25, 0x07	; 7
 6c4:	80 f4       	brcc	.+32     	; 0x6e6 <CloseWindows+0x36>
 6c6:	8f e3       	ldi	r24, 0x3F	; 63
 6c8:	9f e1       	ldi	r25, 0x1F	; 31
 6ca:	01 97       	sbiw	r24, 0x01	; 1
 6cc:	f1 f7       	brne	.-4      	; 0x6ca <CloseWindows+0x1a>
 6ce:	00 c0       	rjmp	.+0      	; 0x6d0 <CloseWindows+0x20>
 6d0:	00 00       	nop
 6d2:	80 81       	ld	r24, Z
 6d4:	91 81       	ldd	r25, Z+1	; 0x01
 6d6:	01 96       	adiw	r24, 0x01	; 1
 6d8:	91 83       	std	Z+1, r25	; 0x01
 6da:	80 83       	st	Z, r24
 6dc:	80 81       	ld	r24, Z
 6de:	91 81       	ldd	r25, Z+1	; 0x01
 6e0:	81 3d       	cpi	r24, 0xD1	; 209
 6e2:	97 40       	sbci	r25, 0x07	; 7
 6e4:	80 f3       	brcs	.-32     	; 0x6c6 <CloseWindows+0x16>
 6e6:	08 95       	ret

000006e8 <_exit>:
 6e8:	f8 94       	cli

000006ea <__stop_program>:
 6ea:	ff cf       	rjmp	.-2      	; 0x6ea <__stop_program>
